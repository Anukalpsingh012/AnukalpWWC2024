#include <iostream>    // For input-output operations
#include <fstream>     // For file handling
#include <vector>      // To store multiple items in the inventory
#include <iomanip>     // For formatting output

using namespace std;

// Class to represent an item in the inventory
class Item {
private:
    int itemID;          // Unique ID for the item
    string name;         // Name of the item
    string category;     // Category of the item (e.g., electronics, furniture)
    int quantity;        // Number of items currently in stock
    int reorderLevel;    // Minimum stock level before reorder is needed

public:
    // Constructor to initialize an item
    Item(int id, string n, string cat, int qty, int reorder) 
        : itemID(id), name(n), category(cat), quantity(qty), reorderLevel(reorder) {}

    // Getter functions to access private data
    int getItemID() const { return itemID; }
    string getName() const { return name; }
    string getCategory() const { return category; }
    int getQuantity() const { return quantity; }
    int getReorderLevel() const { return reorderLevel; }

    // Setter function to update the quantity of the item
    void setQuantity(int qty) { quantity = qty; }

    // Display the details of the item
    void display() const {
        // Printing details in a formatted way
        cout << setw(10) << itemID
             << setw(20) << name
             << setw(20) << category
             << setw(10) << quantity
             << setw(15) << reorderLevel;
        // Display an alert if the quantity is below the reorder level
        if (quantity < reorderLevel)
            cout << "  <-- Reorder Needed";
        cout << endl;
    }

    // Function to write item details to a file (for exporting)
    void writeToFile(ofstream &file) const {
        file << itemID << "," << name << "," << category << "," << quantity << "," << reorderLevel << endl;
    }
};

// Inventory Management System Class
class InventoryManagementSystem {
private:
    vector<Item> items;    // Vector (dynamic array) to hold a list of items

public:
    // Function to add a new item to the inventory
    void addItem() {
        int id, qty, reorder;
        string name, category;
        
        // Input details for the new item
        cout << "Enter Item ID: ";
        cin >> id;
        cout << "Enter Item Name: ";
        cin.ignore(); // To clear the input buffer
        getline(cin, name);  // Allows input of strings with spaces
        cout << "Enter Item Category: ";
        getline(cin, category);
        cout << "Enter Item Quantity: ";
        cin >> qty;
        cout << "Enter Reorder Level: ";
        cin >> reorder;
        
        // Creating a new Item object and adding it to the items list
        Item newItem(id, name, category, qty, reorder);
        items.push_back(newItem); // Adds the new item to the vector
        cout << "Item added successfully!\n";
    }

    // Function to update the stock (quantity) of an existing item
    void updateStock() {
        int id, newQty;
        cout << "Enter Item ID to update stock: ";
        cin >> id;
        
        // Search for the item by its ID
        for (Item &item : items) {
            if (item.getItemID() == id) {
                // If found, update its quantity
                cout << "Current Quantity: " << item.getQuantity() << endl;
                cout << "Enter new Quantity: ";
                cin >> newQty;
                item.setQuantity(newQty);
                cout << "Stock updated successfully!\n";
                return;
            }
        }
        // If item is not found, display a message
        cout << "Item not found.\n";
    }

    // Function to display all items in the inventory
    void viewInventory() {
        cout << "\nCurrent Inventory:\n";
        // Display table headers
        cout << setw(10) << "Item ID"
             << setw(20) << "Name"
             << setw(20) << "Category"
             << setw(10) << "Quantity"
             << setw(15) << "Reorder Level"
             << endl;
        // Loop through each item and display its details
        for (const Item &item : items) {
            item.display();
        }
    }

    // Function to search for an item by its name
    void searchByName() {
        string searchName;
        cout << "Enter item name to search: ";
        cin.ignore();  // To clear the input buffer
        getline(cin, searchName);
        
        // Search through the items
        for (const Item &item : items) {
            if (item.getName() == searchName) {
                // If found, display the item details
                cout << "\nItem Found:\n";
                cout << setw(10) << "Item ID"
                     << setw(20) << "Name"
                     << setw(20) << "Category"
                     << setw(10) << "Quantity"
                     << setw(15) << "Reorder Level"
                     << endl;
                item.display();
                return;
            }
        }
        // If not found, display a message
        cout << "Item not found.\n";
    }

    // Function to search for items by category
    void searchByCategory() {
        string searchCategory;
        cout << "Enter item category to search: ";
        cin.ignore();
        getline(cin, searchCategory);
        bool found = false;
        
        // Loop through the items to find those in the given category
        for (const Item &item : items) {
            if (item.getCategory() == searchCategory) {
                if (!found) {
                    // Display the header only once
                    cout << "\nItems in Category '" << searchCategory << "':\n";
                    cout << setw(10) << "Item ID"
                         << setw(20) << "Name"
                         << setw(20) << "Category"
                         << setw(10) << "Quantity"
                         << setw(15) << "Reorder Level"
                         << endl;
                    found = true;
                }
                // Display the item details
                item.display();
            }
        }
        if (!found)
            cout << "No items found in this category.\n";
    }

    // Function to export the inventory data to a file
    void exportToFile() {
        ofstream outFile("inventory_report.csv");  // Open file to write
        if (!outFile) {
            cerr << "Error opening file!\n";  // Check if file was successfully opened
            return;
        }

        // Write the column headers
        outFile << "ItemID,Name,Category,Quantity,ReorderLevel\n";
        // Write details of each item
        for (const Item &item : items) {
            item.writeToFile(outFile);
        }

        outFile.close();  // Close the file
        cout << "Inventory data exported successfully to 'inventory_report.csv'.\n";
    }

    // Menu-driven interface to interact with the user
    void showMenu() {
        int choice;
        do {
            // Display the menu options
            cout << "\n--- Warehouse Inventory Management System ---\n";
            cout << "1. Add New Item\n";
            cout << "2. Update Stock Levels\n";
            cout << "3. View Inventory\n";
            cout << "4. Search Item by Name\n";
            cout << "5. Search Item by Category\n";
            cout << "6. Export Inventory to File\n";
            cout << "7. Exit\n";
            cout << "Enter your choice: ";
            cin >> choice;

            // Handle the user's menu selection
            switch (choice) {
                case 1: addItem(); break;               // Add a new item
                case 2: updateStock(); break;           // Update stock levels
                case 3: viewInventory(); break;         // View all items
                case 4: searchByName(); break;          // Search items by name
                case 5: searchByCategory(); break;      // Search items by category
                case 6: exportToFile(); break;          // Export data to a file
                case 7: cout << "Exiting program...\n"; break;  // Exit the program
                default: cout << "Invalid choice. Try again.\n";
            }
        } while (choice != 7);  // Keep showing the menu until the user chooses to exit
    }
};

// Main function to run the program
int main() {
    InventoryManagementSystem system;  // Create an instance of the inventory system
    system.showMenu();                 // Show the menu to the user
    return 0;
}
